/*
========================================================================================
    Base Configuration for WES Pipeline
========================================================================================
*/

process {
    // Global process settings
    cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h * task.attempt, 'time' ) }
    
    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'
    
    // Caching
    cache = 'lenient'
    
    // Container settings
    container = 'wes-pipeline:cpu'
    
    // Resource labels
    withLabel: low_cpu {
        cpus   = { check_max( 2, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    withLabel: medium_cpu {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withLabel: high_cpu {
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 16.h * task.attempt, 'time' ) }
    }
    
    withLabel: very_high_cpu {
        cpus   = { check_max( 32 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withLabel: gpu_process {
        cpus   = { check_max( 16, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
        container = 'wes-pipeline:gpu'
        containerOptions = '--gpus all'
        clusterOptions = '--gres=gpu:1'
    }
    
    withLabel: gpu_variant_calling {
        cpus   = { check_max( 8, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 6.h * task.attempt, 'time' ) }
        container = 'wes-pipeline:gpu'
        containerOptions = '--gpus all'
        clusterOptions = '--gres=gpu:1'
    }
}